import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Sparkles, Target, Flame, Zap, CircleCheck as CheckCircle } from 'lucide-react-native';
import { WorkoutForm } from '@/components/WorkoutForm';
import { MacroGoalsForm } from '@/components/MacroGoalsForm';
import { useWorkoutStore } from '@/hooks/useWorkoutStore';
import { generateWorkoutPlan, WorkoutRequest } from '@/services/gemini';
import { router } from 'expo-router';

export default function CreateWorkoutScreen() {
  const [currentStep, setCurrentStep] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [workoutData, setWorkoutData] = useState({
    daysPerWeek: 0,
    goal: '',
    macroGoals: {
      protein: 0,
      carbs: 0,
      fats: 0,
      calories: 0,
    },
  });
  const { addWorkout } = useWorkoutStore();

  const handleDaysSelection = (days: number) => {
    setWorkoutData(prev => ({ ...prev, daysPerWeek: days }));
    setCurrentStep(1);
  };

  const handleGoalSelection = async (goal: string) => {
    const updatedWorkoutData = { ...workoutData, goal };
    setWorkoutData(updatedWorkoutData);
    setCurrentStep(2); // Move to macro goals step
  };

  const handleMacroGoalsSelection = async (macroGoals: any) => {
    const updatedWorkoutData = { ...workoutData, macroGoals };
    setWorkoutData(updatedWorkoutData);
    await generateAIWorkout(updatedWorkoutData.daysPerWeek, updatedWorkoutData.goal, macroGoals);
  };

  const handleSkipMacros = async () => {
    await generateAIWorkout(workoutData.daysPerWeek, workoutData.goal);
  };

  const generateAIWorkout = async (days: number, goal: string, macroGoals?: any) => {
    setIsGenerating(true);

    try {
      const request: WorkoutRequest = {
        daysPerWeek: days,
        goal,
        fitnessLevel: 'intermediate',
        timePerSession: 50,
        macroGoals: macroGoals && macroGoals.calories > 0 ? macroGoals : undefined,
      };

      console.log('Generating workout with request:', request);
      const aiWorkout = await generateWorkoutPlan(request);
      console.log('Generated workout:', aiWorkout);

      const savedWorkout = await addWorkout(aiWorkout);
      console.log('Workout saved with ID:', savedWorkout.id);

      // Set completion state
      setIsCompleted(true);

    } catch (error) {
      console.error('Error generating AI workout:', error);
      Alert.alert(
        'Generation Failed',
        'Unable to generate your workout plan. Please try again.',
        [
          {
            text: 'Try Again',
            onPress: () => {
              setIsGenerating(false);
            },
          },
        ]
      );
    } finally {
      setIsGenerating(false);
    }
  };

  const resetForm = () => {
    setCurrentStep(0);
    setWorkoutData({
      daysPerWeek: 0,
      goal: '',
      macroGoals: {
        protein: 0,
        carbs: 0,
        fats: 0,
        calories: 0,
      },
    });
    setIsGenerating(false);
    setIsCompleted(false);
  };

  const viewWorkouts = () => {
    // Navigate to the workouts tab
    router.push('/(tabs)/exercises');
    // Reset form for next use
    setTimeout(() => {
      resetForm();
    }, 100);
  };

  const createAnother = () => {
    resetForm();
  };

  // Success completion screen
  if (isCompleted) {
    const hasApiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY &&
      process.env.EXPO_PUBLIC_GEMINI_API_KEY !== 'your_gemini_api_key_here';

    return (
      <SafeAreaView style={styles.container}>
        <LinearGradient
          colors={['#667eea', '#764ba2']}
          style={styles.gradient}
        >
          <View style={styles.successContainer}>
            <View style={styles.successContent}>
              <CheckCircle size={80} color="#10B981" />
              <Text style={styles.successTitle}>
                {hasApiKey ? 'AI Workout Created! ðŸ¤–âœ¨' : 'Workout Created! ðŸ’ª'}
              </Text>
              <Text style={styles.successSubtitle}>
                Your personalized {workoutData.daysPerWeek}-day {workoutData.goal.toLowerCase()} workout is ready!
              </Text>
              <Text style={styles.successDescription}>
                {hasApiKey
                  ? 'Generated by Gemini AI with exercises tailored to your goals and fitness level.'
                  : 'Created using our expert-designed templates. Add your Gemini API key for AI-powered customization.'
                }
              </Text>

              <View style={styles.successActions}>
                <TouchableOpacity
                  style={styles.primaryButton}
                  onPress={viewWorkouts}
                >
                  <Text style={styles.primaryButtonText}>View My Workouts</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={styles.secondaryButton}
                  onPress={createAnother}
                >
                  <Text style={styles.secondaryButtonText}>Create Another</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </LinearGradient>
      </SafeAreaView>
    );
  }

  // Loading screen
  if (isGenerating) {
    const hasApiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY &&
      process.env.EXPO_PUBLIC_GEMINI_API_KEY !== 'your_gemini_api_key_here';

    return (
      <SafeAreaView style={styles.container}>
        <LinearGradient
          colors={['#667eea', '#764ba2']}
          style={styles.gradient}
        >
          <View style={styles.loadingContainer}>
            <View style={styles.loadingContent}>
              <Zap size={64} color="#FFFFFF" />
              <Text style={styles.loadingTitle}>
                {hasApiKey ? 'AI is Creating Your Workout' : 'Creating Your Workout'}
              </Text>
              <Text style={styles.loadingSubtitle}>
                {hasApiKey
                  ? 'Analyzing your preferences and generating a personalized plan...'
                  : 'Selecting the best exercises for your goals...'
                }
              </Text>
              <ActivityIndicator size="large" color="#FFFFFF" style={styles.spinner} />
              <View style={styles.loadingSteps}>
                <Text style={styles.stepText}>â€¢ Analyzing your fitness goals</Text>
                <Text style={styles.stepText}>â€¢ Selecting optimal exercises</Text>
                <Text style={styles.stepText}>â€¢ Calculating sets and reps</Text>
                <Text style={styles.stepText}>â€¢ Finalizing your plan</Text>
              </View>
            </View>
          </View>
        </LinearGradient>
      </SafeAreaView>
    );
  }

  const hasApiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY &&
    process.env.EXPO_PUBLIC_GEMINI_API_KEY !== 'your_gemini_api_key_here';

  return (
    <SafeAreaView style={styles.container} edges={['bottom', 'left', 'right']}>
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.gradient}
      >
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          <View style={styles.header}>
            <Sparkles size={32} color="#FFFFFF" />
            <Text style={styles.title}>AI Workout Planner</Text>
            <Text style={styles.subtitle}>
              Create your personalized workout plan {hasApiKey ? 'powered by AI' : 'with expert templates'}
            </Text>
            <View style={styles.aiIndicator}>
              <Zap size={16} color="#FFD700" />
              <Text style={styles.aiText}>
                {hasApiKey ? 'Powered by Gemini AI' : 'Expert Templates'}
              </Text>
            </View>
            {!hasApiKey && (
              <Text style={styles.apiKeyHint}>
                ðŸ’¡ Add your Gemini API key to .env for AI-powered workouts
              </Text>
            )}
          </View>

          <View style={styles.content}>
            {currentStep < 2 ? (
              <WorkoutForm
                currentStep={currentStep}
                workoutData={workoutData}
                onDaysSelection={handleDaysSelection}
                onGoalSelection={handleGoalSelection}
                onReset={resetForm}
              />
            ) : (
              <MacroGoalsForm
                onComplete={handleMacroGoalsSelection}
                onSkip={handleSkipMacros}
              />
            )}
          </View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    alignItems: 'center',
    paddingTop: 40,
    paddingBottom: 30,
  },
  title: {
    fontSize: 32,
    fontFamily: 'Poppins-Bold',
    color: '#FFFFFF',
    marginTop: 12,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#E0E7FF',
    marginTop: 8,
    textAlign: 'center',
  },
  aiIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
    marginTop: 12,
  },
  aiText: {
    fontSize: 12,
    fontFamily: 'Inter-SemiBold',
    color: '#FFD700',
    marginLeft: 6,
  },
  apiKeyHint: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#E0E7FF',
    marginTop: 8,
    textAlign: 'center',
    opacity: 0.8,
  },
  content: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    paddingTop: 30,
    paddingHorizontal: 24,
    minHeight: 500,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  loadingContent: {
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 40,
    borderRadius: 24,
  },
  loadingTitle: {
    fontSize: 24,
    fontFamily: 'Poppins-Bold',
    color: '#FFFFFF',
    marginTop: 20,
    textAlign: 'center',
  },
  loadingSubtitle: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#E0E7FF',
    marginTop: 12,
    textAlign: 'center',
    lineHeight: 24,
  },
  spinner: {
    marginTop: 30,
    marginBottom: 30,
  },
  loadingSteps: {
    alignItems: 'flex-start',
  },
  stepText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#E0E7FF',
    marginBottom: 8,
    opacity: 0.8,
  },
  successContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  successContent: {
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    padding: 40,
    borderRadius: 24,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10,
    },
    shadowOpacity: 0.25,
    shadowRadius: 20,
    elevation: 10,
  },
  successTitle: {
    fontSize: 28,
    fontFamily: 'Poppins-Bold',
    color: '#1F2937',
    marginTop: 20,
    textAlign: 'center',
  },
  successSubtitle: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#374151',
    marginTop: 12,
    textAlign: 'center',
    lineHeight: 26,
  },
  successDescription: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#6B7280',
    marginTop: 16,
    textAlign: 'center',
    lineHeight: 20,
  },
  successActions: {
    width: '100%',
    marginTop: 32,
    gap: 12,
  },
  primaryButton: {
    backgroundColor: '#3B82F6',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    alignItems: 'center',
    shadowColor: '#3B82F6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  primaryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
  },
  secondaryButton: {
    backgroundColor: 'transparent',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#E5E7EB',
  },
  secondaryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#374151',
  },
});